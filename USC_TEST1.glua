type Storage = {
    signture_agree:Array<string>,
    signture_disagree:Array<string>,
    apply_type:int,
    partner:Map<int>,
    partner_num:int,
    issue_num:int,
    apply_address:string,
    balance:Map<int>,
    transfer_version:int,
    destroy_address:string,
    candidate_address:string
}

var M = Contract<Storage>()

--[[
    Token init
]]
function M:init()
    print("init start...")
    self.storage.signture_agree = []
    self.storage.signture_disagree = []
    self.storage.partner = {}
    self.storage.balance = {}
    self.storage.apply_type=0
    self.storage.issue_num = 0
    self.storage.transfer_version = 0
    self.storage.apply_address = ''
    self.storage.candidate_address = ''
    self.storage.destroy_address = 'ALPEJ3CSxQ2GKXaNDTWE4oNM8pSuG6nwJFNW'
    self.storage.partner['ALPDhCZAjEZzQtTPCNtUnKBxdwXnD2pox2fG']=1
    self.storage.partner['ALPLaxdyTsqFmWnyhr74QnbM6X7htH6Fcjw7']=1
    self.storage.partner['ALPKuFauoPXtXu4GubXfqNdCerVEKKaTwAYV']=1
    self.storage.partner_num=2
end

--[[
    Token type USC
]]
function M:COIN_USC()
end

--[[
    Token issue_apply
    apply_type = 1 issue apply
    101:Another vote is in progress
    102:issue_apply caller_address is invalid
    103:issue_apply issue_balance is invalid
]]
function M:issue_apply(arg:string)
    local _apply_address = self.storage.apply_address
    if _apply_address ~= ''  then
        emit issue_apply_fail('101')
        return
    end
    local partner_temp = self.storage.partner[caller_address]
    if partner_temp == nil then
        emit issue_apply_fail('102')
        return
    end
    local issue_balance = tonumber(arg)
    if issue_balance == nil or issue_balance <= 0  then
        emit issue_apply_fail('103')
        return
    end
    local add_num = (issue_balance + 0.0000001) * 100000
    local add_balance = tointeger(add_num)
    self.storage.issue_num = add_balance
    self.storage.apply_address = caller_address
    self.storage.apply_type = 1
    local issue_apply_log = "apply_type"..":"..tostring(self.storage.apply_type)..",".."apply_address"..":"..caller_address..",".."add_balance"..":"..arg
    emit issue_apply_success(issue_apply_log)
end

--[[
    Token partner_apply
    apply_type = 2 add partner apply
    apply_type = 3 delete partner apply
    201:Another vote is in progress
    202:partner_apply caller_address is invalid
    203:partner_apply candidate_address is invalid
]]
function M:partner_apply(arg:string)
    local _apply_address = self.storage.apply_address
    if _apply_address ~= ''  then
        emit partner_apply_fail('201')
        return
    end
    local partner_temp = self.storage.partner[caller_address]
    if partner_temp == nil then
        emit partner_apply_fail('202')
        return
    end
	local to_address = arg;
    local size = string.len(arg)
    if string.sub(to_address, 1,3) ~= "ACT" then
        emit partner_apply_fail('203')
        return
    end
    if size < 35 then
      emit partner_apply_fail('203')
      return
    end
    if size > 50 then
      to_address = string.sub(to_address, 1, size-32)
    end
    local _destroy_address=self.storage.destroy_address
    if _destroy_address == to_address then
		emit partner_apply_fail('203')
        return
	end
    self.storage.apply_address = caller_address
    self.storage.candidate_address = to_address
    partner_temp = self.storage.partner[to_address]
    if partner_temp == nil then
        self.storage.apply_type = 2
    else
        self.storage.apply_type = 3
    end
    local issue_apply_log = "apply_type"..":"..tostring(self.storage.apply_type)..",".."apply_address"..":"..caller_address..",".."candidate_address"..":"..arg
    emit partner_apply_success(issue_apply_log)
end

--[[
    Token signture_agree
    301:No vote available or you can not vote for yourself
    302:caller_address is invalid
    303:Parameter Address does not match
    304:Have been involved
]]
function M:signture_agree(arg:string)
    local _apply_address = self.storage.apply_address
    if _apply_address == caller_address or _apply_address == ''  then
        emit signture_agree_fail('301')
        return
    end
    local partner_temp = self.storage.partner[caller_address]
    if partner_temp == nil then
	    emit signture_agree_fail('302')
	    return
	end
    if arg ~= _apply_address then
        emit signture_agree_fail('303')
        return
    end
	local in_flag: bool = false 
    for k,v in pairs(self.storage.signture_agree) do
        if caller_address == v then
            in_flag = true
            emit signture_agree_fail('304')
            return
        end
    end
    if in_flag == false then
        self.storage.signture_agree[#self.storage.signture_agree+1] = caller_address
    end
    local signture_agree_num = table.length(self.storage.signture_agree)
    if signture_agree_num >= self.storage.partner_num then
        local _apply_type = self.storage.apply_type
        if _apply_type == 1 then
            self.storage.balance[_apply_address] = self.storage.balance[_apply_address] + self.storage.issue_num
            local _apply_address_log = "apply_type"..":"..tostring(_apply_type)..",".._apply_address..":"..tostring(self.storage.balance[_apply_address])
            emit signture_agree_finished(_apply_address_log)
        end
        if _apply_type == 2 then
            local temp_candidate_address = self.storage.candidate_address
            self.storage.partner[temp_candidate_address]=1
        end
        if _apply_type == 3 then
            table.remove(self.storage.partner,self.storage.candidate_address)
        end
        if _apply_type == 2 or _apply_type == 3 then
            local _partner_list_log = ''
            local _num = 0
            for k,v in pairs(self.storage.partner) do
                if k ~= nil then
                    _partner_list_log = _partner_list_log ..","..tostring(k)
                    _num = _num + 1
            end
            self.storage.partner_num =tointeger(_num/2 + _num%2)
            local _apply_address_log = "apply_type"..":"..tostring(_apply_type)..",".._partner_list_log
            emit signture_agree_finished(_apply_address_log)
        end
        self.storage.signture_agree = []
        self.storage.signture_disagree = []
        self.storage.apply_address='' 
        self.storage.issue_num = 0
        self.storage.apply_type = 0
        self.storage.candidate_address=''
    else
        local s_apply_address_log = "apply_type"..":"..tostring(_apply_type)..","..caller_address
        emit signture_agree_success(s_apply_address_log)
    end
    end
end

--[[
    Token signture_disagree
    401:No vote available or you can not vote for yourself
    402:caller_address is invalid
    403:Parameter Address does not match
    404:Have been involved
]]

function M:signture_disagree(arg:string)
    local _apply_address = self.storage.apply_address
    if _apply_address == caller_address or _apply_address == '' then
        emit signture_disagree_fail('401')
        return
    end
    local partner_temp = self.storage.partner[caller_address]
    if partner_temp == nil then
	    emit signture_disagree_fail('402')
	    return
	end
    if arg ~= _apply_address then
        emit signture_disagree_fail('403')
        return
    end
	local in_flag: bool = false 
    for k,v in pairs(self.storage.signture_disagree) do
        if caller_address == v then
            in_flag = true
            emit signture_disagree_fail('404')
            return
        end
    end
    if in_flag == false then
        self.storage.signture_disagree[#self.storage.signture_disagree+1] = caller_address
    end
    local signture_disagree_num = table.length(self.storage.signture_disagree)
    local _apply_type = self.storage.apply_type
    if signture_disagree_num > self.storage.partner_num then
        self.storage.signture_agree = []
        self.storage.signture_disagree = []
        self.storage.issue_num = 0
        self.storage.apply_type = 0
        self.storage.candidate_address=''
        self.storage.apply_address=''
        local _apply_address_log = "apply_type"..":"..tostring(_apply_type)..",".._apply_address
        emit signture_disagree_finished(_apply_address_log)
    else
        local s_apply_address_log = "apply_type"..":"..tostring(_apply_type)..","..caller_address
        emit signture_disagree_success(s_apply_address_log)
    end
end


--[[
    Token destroy
    501:caller_address is invalid(Permission denied)
    502:arg is invalid
]]
function M:_destroy(arg:string)
    local partner_temp = self.storage.partner[caller_address]
    if partner_temp == nil then
	    emit destroy_fail('501')
	    return
	end
    local balance = tonumber(arg)
    if balance == nil or balance <= 0  then
      emit destroy_fail('502')
      return 
    end
    local _destroy_address=self.storage.destroy_address
    local destroy_num = (tonumber(arg) + 0.0000001) * 100000
    local destroy_balance = tointeger(destroy_num)
    self.storage.balance[caller_address] = self.storage.balance[caller_address] - destroy_balance
    self.storage.balance[_destroy_address] = self.storage.balance[_destroy_address] + destroy_balance
  	local _destroy_log = caller_address..":"..tostring(self.storage.balance[caller_address])..",".._destroy_address..":"..tostring(self.storage.balance[_destroy_address])..","..tostring(get_chain_now())
	emit destroy_success(_destroy_log)
end

--[[
    Token transfer
    701:Transfer address is invalid
    702:Transfer balance is invalid
    703:Transfer Account is invalid
    704:Balance is insufficient
]]
function M:transfer_to(arg:string)
    arg=string.gsub(arg, "%s","")
    local items:Array<string>
    items = []
    items = string.split(arg, '|')
    local to_address = items[1]
    local size = string.len(to_address)
    if size < 35 then
      emit transfer_to_fail('701')
      return
    end
    if size > 50 then
      to_address = string.sub(to_address, 1, size-32)
    end
    
    if string.sub(to_address, 1,3) ~= "ACT" then
        emit transfer_to_fail('701')
        return
    end
    local _destroy_address=self.storage.destroy_address
    if _destroy_address == to_address or caller_address == _destroy_address then
		emit transfer_to_fail("701")
        return
	end
	if caller_address == to_address then
		emit transfer_to_fail("701")
        return
	end

    local transfer_balance = tonumber(items[2])
    if transfer_balance == nil then
        emit transfer_to_fail("702")
        return
    end
    local transfer_balance_number1 = (transfer_balance+0.0000001) * 100000
    local transfer_balance_number = tointeger(transfer_balance_number1)
    if transfer_balance_number <= 0 then
		--add error massage
        emit transfer_to_fail('702')
        return
    end
    local balance = self.storage.balance[caller_address]
    if balance == nil then
        emit transfer_to_fail('703')
        return
    end
    
    if balance < transfer_balance_number then
		--add error massage
       
        emit transfer_to_fail('704')
        return
    end
    
	balance =  balance - transfer_balance_number
    self.storage.balance[caller_address] =  balance

	local to_balance = self.storage.balance[to_address]    
    if to_balance == nil then
       to_balance = 0
    end

	to_balance = to_balance + transfer_balance_number
    self.storage.balance[to_address] = to_balance
    
	local version = self.storage.transfer_version
	version = tointeger((version+1)%1000000	)
	self.storage.transfer_version = version
    local temp_transfer_log = caller_address..":"..tostring(balance)..","..to_address..":"..tostring(to_balance)..","..tostring(version)..","..tostring(get_chain_now())
	emit transfer_to_success(temp_transfer_log)	
end

--[[
    Query Balance
]]
function M:query_balance()
    if self.storage.balance[caller_address] == nil then
        print("TOKEN:USC:BLC:"..caller_address..":0:END") 
        return
    end

    local balance = self.storage.balance[caller_address]
    print("TOKEN:USC:BLC:"..caller_address..":"..tostring(balance)..":END")  
end

return M