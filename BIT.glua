type Storage = {
    name:string,
    balance:Map<int>,
	transfer_version:int
}

var M = Contract<Storage>()

function M:init()
    print("≥ı ºªØ")
    self.storage.name = "BIT"
	self.storage.transfer_version = 0
    self.storage.balance = {}
    self.storage.balance['ACTxh6ACPqeUuRZRtAN91EKuEk3MqyB94W2'] = 58823529500000
end

function M:transfer_to(arg:string)
    arg=string.gsub(arg, "%s","")
    local items:Array<string>
    items = []
    items = string.split(arg, '|')
    local to_address = items[1]
    local size = string.len(to_address)
    if size < 35 then
    
      emit transfer_to_fail('Transfer address is invalid')
      return
    end
    if size > 50 then
    
      to_address = string.sub(to_address, 1, size-32)
    end
    
    if string.sub(to_address, 1,3) ~= "ACT" then
        emit transfer_to_fail('Transfer address is invalid')
        return
    end
    
	if caller_address == to_address then
		emit transfer_to_fail("Transfer address is invalid")
        return
	end

    local transfer_balance = tonumber(items[2])
    if transfer_balance == nil then
        emit transfer_to_fail("Transfer balance is invalid")
        return
    end
    local transfer_balance_number1 = (transfer_balance+0.0000001) * 100000
    local transfer_balance_number = tointeger(transfer_balance_number1)
    if transfer_balance_number <= 0 then
		--add error massage
        emit transfer_to_fail('Transfer balance is invalid')
        return
    end
    local balance = self.storage.balance[caller_address]
    if balance == nil then
        emit transfer_to_fail('Transfer Account is invalid')
        return
    end
    
    if balance < transfer_balance_number then
		--add error massage
       
        emit transfer_to_fail('Balance is insufficient')
        return
    end
    
	balance =  balance - transfer_balance_number
    self.storage.balance[caller_address] =  balance

	local to_balance = self.storage.balance[to_address]    
    if to_balance == nil then
       to_balance = 0
    end

	to_balance = to_balance + transfer_balance_number
    self.storage.balance[to_address] = to_balance
    
	local version = self.storage.transfer_version
	version = tointeger((version+1)%1000000	)
	self.storage.transfer_version = version
    local temp_transfer_log = caller_address..":"..tostring(balance)..","..to_address..":"..tostring(to_balance)..","..tostring(version)..","..tostring(get_chain_now())
	emit transfer_to_success(temp_transfer_log)	
end

function M:query_balance()

    if self.storage.balance[caller_address] == nil then
        print("TOKEN:BIT:BLC:"..caller_address..":0:END")
        return
    end

    local balance = self.storage.balance[caller_address]
    print("TOKEN:BIT:BLC:"..caller_address..":"..tostring(balance)..":END")
end

function M:COIN_BIT()
end

return M
